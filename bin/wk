#!/bin/bash

readonly WORKDIR=~/.work
readonly LOGFOLDER=$WORKDIR/logs
readonly DATA=$WORKDIR/data
readonly DATA_FILE=$WORKDIR/log.txt
readonly REPORT=$WORKDIR/minutes.txt

# * 引数を格納する連想配列
# * keyには、省略系ではない引数optionを正規化して格納
# * valueはkeyに対する値を格納
# * valueがないkeyも存在
declare -A args

# optons_value, optionsに対し、
# 省略系がない引数に関しては、記載の必要なし

# 値がある引数オプション
declare -A options_value=(
	["m"]="message"
)
# 値がない引数オプション
declare -A options=(
	["i"]="interactive"
	["e"]="edit"
)

# [注意] grepで検索する条件が日付とのマッチングになっている
# tac でファイル全ての行を反転させているため、行数が多い場合に時間がかかるかもしれない
readonly BEFORE=$(tac ${REPORT} | grep -m 1 -E "^\[[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\]" | sed -e 's/^\[\(.*\)\]/\1/')
echo $BEFORE
readonly NOW=$(date '+%F %X')

readonly BEFORE_YEAR=$(date -d "$BEFORE" +%Y)
readonly BEFORE_MONTH=$(date -d "$BEFORE" +%m)
readonly BEFORE_DAY=$(date -d "$BEFORE" +%d)
readonly BEFORE_HOUR=$(date -d "$BEFORE" +%H)
readonly BEFORE_MINUTES=$(date -d "$BEFORE" +%M)
readonly BEFORE_SECONDS=$(date -d "$BEFORE" +%S)

readonly YEAR=$(date -d "$NOW" +%Y)
readonly MONTH=$(date -d "$NOW" +%m)
readonly DAY=$(date -d "$NOW" +%d)
readonly HOUR=$(date -d "$NOW" +%H)
readonly MINUTES=$(date -d "$NOW" +%M)
readonly SECONDS=$(date -d "$NOW" +%S)

readonly INTERACTIVE_START_MSG="start"
readonly INTERACTIVE_END_MSG="end"

if [[ -z EDITOR ]]; then
	EDITOR=vi
fi

######################## オプションの処理 ########################
while (( $# > 0 )); do
	key=
	value=
	key_small=
	opt_str=

	case $1 in
		--*=* )
			key=$(echo $1 | sed -e "s/--\(.+\)=.*/\1")
			value=$(echo $1 | sed -e "s/--.+=\(.*\)/\1")
			args["${key}"]="${value}" # 共通化したい
			shift
			;;
		--* )
			key=$(echo $1 | sed -e "s/--\(.+\)/\1")
			args["${key}"]="${value}"
			shift
			;;
		-? )
			key_small=${1:1:1}
			if [[ " ${!options_value[@]} " =~ " ${key_small} " ]]; then
				key="${options_value["${key_small}"]}"
				value=$2
				if [[ -z $value ]]; then
					echo "[arg:${key}] does not have value."
					exit -1
				else
					args["${key}"]="${value}"
				fi

				shift 2
			elif [[ " ${!options[@]} " =~ " ${key_small} " ]]; then
				key="${options[${key_small}]}"
				args["${key}"]="${value}"
				shift
			else
				shift
			fi
			;;
		-* )
			opt_str=${$1:1:${#1}-1}l
			for i in $( seq 0 $((${#1} - 1)) ); do
				key_small=${opt_str:i:1}
				if [[ " ${!options[@]} " =~ " ${key_small} " ]]; then
					key=${options_value[${key_small}]}
					args["${key}"]="${value}"
				fi
			done
			shift
			;;
		* )
			shift
			;;
	esac
done

################### オプションに対する意味の定義 ###################

# 計算の順序関係として最初にしなければいけないもの
message=
for key in ${!args[@]}; do
	case $key in
		"message" )
			message=${args[$key]}
			echo "[$NOW] $message" >> $DATA_FILE
			;;
	esac
done

# 計算の順序関係として2番目にしなければいけないもの
for key in ${!args[@]}; do
	case $key in
		"interactive" )
			echo "[$NOW] ${INTERACTIVE_START_MSG}" >> $DATA_FILE
			if [ -f $REPORT ]; then
				rm $REPORT
			fi
			$EDITOR $REPORT
			cat $REPORT >> $DATA_FILE
			echo "[$(date '+%F %X')] ${INTERACTIVE_END_MSG}" >> $DATA_FILE
			;;
	esac
done

# 計算の順序関係として最後にしなければいけないもの
for key in ${!args[@]}; do
	case $key in
		"edit" )
			$EDITOR $DATA_FILE
			;;
	esac
done
